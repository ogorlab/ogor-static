---
import BaseLayout from "@/layouts/BaseLayout.astro";
import ForecastContributors from "@/components/ForecastContributors.astro";
import { getLocalizedPaths } from "@/i18n";
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { useI18n } from "@/i18n";
import { t as _t } from "i18next"

interface Props {
  entry: CollectionEntry<"forecast">;
  title: string;
  title_long: string;
}

export const getStaticPaths = (async () => {
  const entries = await getCollection("forecast")
  const paths = entries.flatMap(entry => {
    return getLocalizedPaths("yield/forecast", (item, lng) => {
      const date = new Date(entry.data.forecast_date)
      const localeDate = date.toLocaleDateString(lng, {
        day: "numeric", month: "long", year: "numeric"
      })
      const crop_code = entry.data.crops[0].code
      const forecastCrops = entry.data.crops.map(crop => crop.code)
      const title = _t("yield_title", { lng, crops: forecastCrops.slice(0, -1)
        // @ts-ignore it accepts numbers as keys, but doen't know it
        .map(c => _t(c, { lng, ns: "crops" }))
        .join(", ")
        .concat(
          " " + _t("and", { lng }) + " " +
          // @ts-ignore
          _t(forecastCrops[forecastCrops.length - 1], { lng, ns: "crops" })
        )
      })

      item.params.slug = entry.id
      item.props.entry = entry;
      item.props.title = _t("yield_forecast.ogorForecastFrom", { lng, date: localeDate })
      item.props.title_long = title
      item.props.description = title
      item.props.og_image = `/yield/maps/ogor_yield_${crop_code}_${entry.id.replaceAll("-", "")}_preview.png`

      return item
    })
  })
  return paths
}) satisfies GetStaticPaths;

const { t } = useI18n(Astro.currentLocale)
const { entry } = Astro.props
const { getUrl } = Astro.locals

const entries = await getCollection("forecast")
const lastForecast = entries[entries.length - 1].id
const lastForecastLocaleDate = (new Date(lastForecast)).toLocaleDateString(Astro.currentLocale, {
  day: "numeric", month: "long", year: "numeric"
})
const forecastLocaleDate = (new Date(entry.data.forecast_date)).toLocaleDateString(Astro.currentLocale, {
  day: "numeric", month: "long", year: "numeric"
})
function formatNumber(n: number) {
  return n.toLocaleString(Astro.currentLocale, {
    maximumFractionDigits: 0,
  });
}


---
<BaseLayout {...Astro.props}>
  <header class="yield-header">
    <h1 class="yield-title">
      <span class="yield-1">
        {t("yield_forecast.ogorForecastFrom", { date: forecastLocaleDate })}
      </span>
      <span class="yield-2">{t("yield_forecast.regarding")}</span>
      <span class="yield-3">{ Astro.props.title_long }</span>
    </h1>
    <p class="yield-4">
      {t("yield_forecast.byApplyingML")}
    </p>
  
    <div class="separator">
      <svg width="24" height="16" viewBox="0 0 24 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="8" height="16" fill="#033CBD" />
        <rect x="16" width="8" height="16" fill="#C80307" />
        <rect x="8" width="8" height="16" fill="#FEDC00" />
      </svg>
    </div>
  </header>
  
  <section id="maps">
    {
      entry.data.crops.map((crop, index) => {
        return (
          <article class="crop" id={crop.code.toString()} style="scroll-margin-top: 6em;">
            <a href={`/yield/maps/ogor_yield_${crop.code}_${entry.data.forecast_date.replaceAll("-","")}.png`} class="media"
               data-umami-event="Download Yield Map" data-umami-event-crop={crop.code}>
              <img src={`/yield/maps/ogor_yield_${crop.code}_${entry.data.forecast_date.replaceAll("-","")}_preview.png`} alt="" />
            </a>
            <h2 class={ "li-bullet-" + (index + 1) }>{t(crop.code, { ns: "crops"}).toUpperCase()}</h2>
            
            <div class="key-metric">
              <span>{crop.avg_yield}¬†t/ha</span>
              <strong>{t("yield_forecast.averageYield")}</strong>
            </div>
            <div class="key-metric">
              <span>{formatNumber(crop.total_surface)}¬†ha</span>
              <strong>{t("yield_forecast.harvestedSurface")}</strong>
            </div>

            {crop.interpretation && (
              <blockquote>
                <p>{crop.interpretation[Astro.currentLocale!].text}</p>
                <cite>{crop.interpretation[Astro.currentLocale!].cite}</cite>
              </blockquote>
            )}
            <a href={`/yield/maps/ogor_yield_${crop.code}_${entry.data.forecast_date.replaceAll("-","")}.png`} class="download-map-button" download
               data-umami-event="Download Yield Map" data-umami-event-crop={crop.code}>
              <span>{t("yield_forecast.downloadMap")}</span>
            </a>
          </article>
          <hr/>
        );
      })
    }
  </section>
  <section class="flex flex-1 flex-wrap my-8 gap-4 tl:gap-8">
    <nav class="forecast-more-element more-links">
      <ul class="pl-4" data-marker="x">
        <li>
          <a href={getUrl(`/yield/forecast/${lastForecast}`)} class="hover:underline">
            {t("yield_forecast.lastForecast", {date: lastForecastLocaleDate})}
          </a>
        </li>
        <li>
          <a href={getUrl("/yield", "#history")}>
            {t("yield_forecast.history")}
          </a>
        </li>
        <li><a href={getUrl("yield")}>{t("yield_forecast.aboutTheProject")}</a></li>
      </ul>
    </nav>

    { entry.data.next_forecast_date && (
      <div class="forecast-more-element next-forecast">
        <p>
          <span class="emoji">üóìÔ∏è</span>
          <span class="inline-block" set:html={
            t("yield_forecast.nextForecast", { date: 
              (new Date(entry.data.next_forecast_date)).toLocaleDateString(Astro.currentLocale, {
                day: "numeric", month: "long", year: "numeric"
              }),
            })
          }/>
        </p>
      </div>
    )}

    <a class="forecast-more-element contact-ogor" href="mailto:contact@ogor.ro">
      <p set:html={t("yield_forecast.contactOgorTeam")}/>
    </a>
  </section>
  <ForecastContributors />
</BaseLayout>


<style is:inline>
  .next-forecast em {
    font-style: normal;
    text-decoration: underline;
  }
</style>
<style>
  header {
    margin-inline: var(--bleed)
  }
  section {
    --li-color: #C58336;
    margin-inline: var(--bleed);
  }
  hr {
    margin-block: 2rem;
    border-color: hsla(56, 26%, 89%, 1);
  }
  blockquote {
    @apply tl:max-w-[30rem] tl:clear-left ml-0 font-serif;
    & > p::before {
      content: open-quote;
    }
    & > p::after {
      content: close-quote;
    }
  }
  cite {
    display: list-item;
    margin-top: 0.25em;
    margin-left: 1rem;
    font-size: smaller;
  }
  cite::marker {
    content: "‚Äî";
  }
  
  .yield-header {
    margin-top: 1.5rem;
    text-align: center;
  
    &::after {
      content: "";
    }
  }
  
  .yield-1,
  .yield-2,
  .yield-3 {
    display: block;
    margin-block: 0.25rem;
    @media (min-width: 800px) {
      margin-block: 0.5rem;
    }
  }
  
  .yield-1 {
    font-weight: 500;
    font-size: 1rem;
    @media (min-width: 800px) {
      font-size: 1em;
    }
  }
  
  .yield-2,
  .yield-4 {
    font-family: "Sorts Mill Goudy", "Georgia";
    font-style: italic;
    font-weight: normal;
    font-size: small;
  
    &::before,
    &::after {
      content: " - ";
    }
    @media (min-width: 800px) {
      font-size: 1rem;
    }
  }
  
  .yield-3 {
    margin-block: 0.5rem;
    font-size: 1.5rem;
    font-weight: 700;
    text-transform: uppercase;
    line-height: 1.25;
    font-stretch: 90%;
    letter-spacing: 0.03em;
  
    @media (min-width: 800px) {
      font-size: 3rem;
    }
  }
  
  .separator {
    margin-block: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 1rem;
    overflow: visible;
    gap: 1rem;
  
    &::before,
    &::after {
      content: "";
      display: block;
      border-top: 1px solid grey;
      width: 100%;
    }
  
    @media (min-width: 800px) {
      margin-block: 2rem;
    }
  }
  .separator svg {
    width: 2em;
    align-self: center;
  }
  
  .download-map-button {
    min-width: 7.5em;
    display: inline-block;
    padding: 0.5rem 1rem;
    text-decoration: none;
    border-radius: 10rem;
    text-align: center;
    color: white;
    background: black;
    font-weight: 600;
    clear: both;
  
    &:hover {
      box-shadow: 0 0 0 2px var(--action), inset 0 0 0 2px var(--paper);
    }
  }

  .crop {
    display: flow-root;
    isolation: isolate;

    & h2 {
      margin-bottom: 1rem;
      font-size: 1.5em;

      @media screen(tl) {
        margin-top: 0;
        font-size: 2em;
      }
      @media screen(tp-max) {
        &::before {
          content: none;
        }
      }
    }

    & .media {
      cursor: zoom-in;
      display: block;
      overflow: hidden;
      border: 1px solid grey;
      border-radius: 1rem;
      margin-bottom: 1rem;

      @media screen(tl) {
        float: right;
        width: 60%;
        margin-left: 2rem;
        margin-bottom: 2rem;
      }
    }
    & .media img {
      display: block;
      width: 100%;
      height: 100%;
    }
  }

  .key-metric {
    position: relative;
    border-left: thick solid #eae9dc;
    margin-bottom: 1rem;
    padding-left: 0.75rem;
    padding-right: 1.5rem;
    font-size: smaller;
    float: left;
  
    & span {
      display: block;
      font-size: larger;
      line-height: 2.5rem;
    }
    & strong {
      display: block;
      font-weight: normal;
      font-stretch: 95%;
    }
  }

  .forecast-more-element {
    @apply p-4 rounded-2xl flex items-center;
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 25%;
    min-width: 10rem;
  }
  .more-links {
    background: #f5f7f3;
    a:not(:hover) {
      color: inherit;
      text-decoration: none;
    }
  }
  .next-forecast {
    background: #b9e5fb;
  }
  .contact-ogor {
    text-decoration: none;
    background: hsla(44, 100%, 89%, 1);
    color: hsla(213, 92%, 33%, 1);
    strong {
      text-decoration: underline;
    }
  }

</style>