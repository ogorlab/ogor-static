---
import { t } from "i18next";
import { getLocalizedPaths } from "@/i18n";
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";

interface Props {
  entries: CollectionEntry<"forecast">[]
}

const { entries } = Astro.props
const { getUrl } = Astro.locals

const forecasts = entries.toReversed().map((entry, index, arr) => {

  const prevEntry = arr[index - 1]
  const prevYear = prevEntry && new Date(prevEntry.data.forecast_date).getFullYear()

  const year = new Date(entry.data.forecast_date).getFullYear()
  const separate = prevYear !== year

  return {
    date: entry.data.forecast_date,
    separate,
    crops: Object.fromEntries(
      entry.data.crops.map(crop => [crop.code, crop])
    )
  }
})

const crop_codes = [101, 105, 202, 108, 201]

export const getStaticPaths = (async () => {
  const entries = await getCollection("forecast")

  return getLocalizedPaths("yield/forecast", (item) => {
    item.props.entries = entries
    return item
  })
}) satisfies GetStaticPaths;
---
<style is:inline>
  #content {
    padding-inline: var(--bleed);
  }
</style>
<BaseLayout>

  <p class="mt-[1em] mb-0">
    <a href={getUrl("yield")}>← {t("back")}</a>
  </p>
  <h1 class="mt-1 mb-[1em]">{t("yield_forecast.history")}</h1>

  <table>
    <thead>
      <tr>
        <th class="separator">
          2025
        </th>
        { crop_codes.map((crop_code, crop_index) => (
          <th class="pr-4">
            <div class="mx-auto w-12">
              <img src={`/images/crop_thumbnail_${crop_code}.png`} />
            </div>

            {t(crop_code.toString(), { ns: "crops" })}
          </th>
        ))}
      </tr>
    </thead>

    <tbody>
      { forecasts.map(({ date, crops, separate }, index) => (<>
        { separate && index !== 0 &&
          <tr class="separator-tr">
            <th class="separator">{ new Date(date).getFullYear() }</th>
            <td colspan={crop_codes.length}></td>
          </tr>
        }
        <tr class:list={[index == 0 && "latest_forecast"]}>
          <th>
            <a href={getUrl("yield/forecast/" + date)}>
              { t("dateShort", { date: new Date(date) }) }
            </a>
          </th>

          { crop_codes.map(
            code => crops[code]
            ? <td>
                <a href={getUrl("yield/forecast/" + date + "#" + code)}>
                  {crops[code].avg_yield.toLocaleString(Astro.currentLocale, { minimumFractionDigits: 1, maximumFractionDigits: 1 })}
                </a>
              </td>
            : <td></td>
          )}
        </tr>
      </>))}
    </tbody>
  </table>
</div>
</BaseLayout>

<style>
  table {
    --cell-padding: .5em;
    --neg-cell-padding: -.5em;

    table-layout: fixed;
    border-collapse: collapse;
    text-align: center;
    width: 100%;

    & thead {
      vertical-align: bottom;
    }
    & th:first-child {
      border-right: medium solid var(--bg);
    }
    & tbody tr:not(.separator-tr) {
      border-top: thin solid var(--border);
    }

    & img {
      display: inline block;
      width: 150%;
      height: auto;
      margin: -25%;
    }
    & a {
      display: inline-block;
      margin: var(--neg-cell-padding);
      padding: var(--cell-padding);
    }
    & a:not(:hover) {
      text-decoration: none;
      color: inherit
    }

    & :where(th, td) {
      padding: var(--cell-padding, .5em);
    }
  }

  .separator {
    font-weight: initial;
    color: var(--muted);
  }

  .latest_forecast :where(th, td) {
    background: hsla(90, 22%, 96%, 1);
  }
</style>

