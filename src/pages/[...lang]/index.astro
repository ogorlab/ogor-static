---
import { PUBLIC_OGOR_APP_LOGIN_URL } from "astro:env/client";
import { t } from "i18next"
import { getLocalizedPaths } from "@/i18n";
// import CheckAuthentication from "@/components/CheckAuthentication.astro";
import BaseLayout from "@/layouts/BaseLayout.astro"
import type { GetStaticPaths } from "astro";
import { getLatestForecast } from "@/content.config";
import { getCollection, render } from "astro:content";

const { getUrl } = Astro.locals

const latestForecast = await getLatestForecast()
const latestForecastLocaleDate = (new Date(latestForecast.data.forecast_date)).toLocaleDateString(Astro.currentLocale, {
  day: "numeric", month: "long", year: "numeric"
})

const latestForecastPreview = `/yield/maps/ogor_yield_${latestForecast.data.crops[0].code}_${latestForecast.data.forecast_date.replaceAll("-", "")}_preview.png` // "ogor_yield_101_20240702_preview.png"
const testimonials = (await getCollection("testimonials", (entry) => entry.id.startsWith(Astro.currentLocale || "ro")))

export const getStaticPaths = (() => getLocalizedPaths("/")) satisfies GetStaticPaths;
---
<!-- <CheckAuthentication /> -->
<BaseLayout>
  <section id="hero">
    <div class="_media2">
      <img src="/images/kv_main.png" alt={t("alt:kv_main")}>
    </div>
    <div class="_body">
      <h1 class="max-w-[45rem] mt-0 text-[200%]">{ t("home.hero_heading") }</h1>
      <p  class="max-w-[45rem] text-[larger]" set:html={ t("home.hero_description") } />
    </div>
    <a href={ PUBLIC_OGOR_APP_LOGIN_URL } class="_cta _cta-link block text-center content-center text-white">
      <span class="underline">{ t("home.hero_cta") }</span> →
    </a>
    <div class="_media1 flex justify-center items-center max-t:hidden">
      <img src="/images/kv_devices.png" alt={t("alt:kv_devices")}>
    </div>
  </section>

  <section id="features" class="features">
    <h2 class="text-rust text-center">{ t("home.why_ogor") }</h2>

    <section class="main-feature">
      <h3 class="li-bullet-1">{ t("home.feature1_heading") }</h3>
      <p class="mx-auto mb-12 max-w-[72ch]">{ t("home.feature1_description") }</p>

      <div class="media mx-auto">
        <picture>
          <source media="(min-width: 37.5rem)" srcset="/images/screenshot_farm_view_desktop.png">
          <img src="/images/screenshot_farm_view_mobile.png" alt={t("alt:screenshot_farm_view")} 
              class="block w-full mx-auto max-t:max-w-[16rem] max-t:rounded-t-md t:max-w-[60rem t:rounded-t-2xl shadow-screenshot"
              style="image-rendering: pixelated; clip-path: xywh(-25% -25% 150% 125%);"
          />
        </picture>

      </div>
    </section>
  
    <div id="context" class="px-[var(--margins)] py-2 t:py-6 bg-[#fff0c74d] text-center mx-[var(--neg-bleed)]">
      <p set:html={ t("home.context") } class="max-w-[55ch] mx-auto"/>
    </div>

    <section class="feature feature-left">
      <div class="area-body">
        <h3 class="li-bullet-2 mt-0">{ t("home.feature2_heading") }</h3>
        <p class="mb-[2em]">{ t("home.feature2_description") }</p>
      </div>
      <div class="area-media t:aspect-square content-center relative">
        <img src="/images/flooding.png" alt={t("alt:flooding")} />
        <!-- <img src="/images/patrick_isolated.png" alt="Patrick Valmary"
             class="m:w-[12em] w-[50%] absolute left-[-15%] bottom-0"
        /> -->
      </div>
    </section>

    <section class="feature">
      <div class="area-body">
        <img src="/images/team_avatars.png" alt="" class="block h-[3em]">
        <h3 class="mt-[1em]">{ t("home.feature4_heading") }</h3>
        <p class="mb-[2em]">{ t("home.feature4_description") }</p>
      </div>
      <div class="area-media t:aspect-square content-center">
        <img src="/images/pests.png" alt={t("alt:pests")} class="rounded-[1.5em] shadow-lg" />
      </div>
    </section>

    <section class="feature feature-left">
      <div class="area-body">
        <h3 class="li-bullet-4 mt-0">{ t("home.feature3_heading") }</h3>
        <p>{ t("home.feature3_description") }</p>
        <ul class="mb-[2em]">
          <li class="my-[.5em]">
            <a href={getUrl(`/yield/forecast/${latestForecast.id}`)} class="text-[inherit]">
              {t("yield_forecast.ogorForecastFrom", { date: latestForecastLocaleDate })} →
            </a>
          </li>
          <li>
            <a href={getUrl("/yield")} class="text-[inherit]">
              {t("yield_forecast.aboutTheProject")}
            </a>
          </li>
        </ul>
      </div>
      <a href={getUrl("/yield")} class="area-media t:aspect-square content-center">
        <img src={latestForecastPreview} alt={t("alt:forecast_country", { date: latestForecastLocaleDate })} 
             class="border-[.25em] border-solid border-white rounded-md shadow-map-preview" 
        />
      </a>
    </section>
  
    
    <section class="plus grid mb-8 t:grid-cols-2  gap-[var(--gutter)] mt-8 border-b-0 text-larger">
      <p class="m-0 font-bold text-rust col-span-full">Plus:</p>
      {[
        { name: "accumulated_precipitation", icon: "/images/icon_precipitation.png", },
        { name: "weather_forecast", icon: "/images/icon_weather_forecast.png", },
        { name: "water_capacity", icon: "/images/icon_water_capacity.png", },
        { name: "crop_rotation", icon: "/images/icon_crop_rotation.png", },
        { name: "soil_map", icon: "/images/icon_soil_map.png", },
        { name: "vra", icon: "/images/icon_vra.png", href: "https://ogor.farm/vra"},
        { name: "soil_analysis", icon: "/images/icon_soil_analysis.png", }
      ].map((f) => (
        <details class="open:col-span-full">
          <summary class="flex items-center gap-[1em]">
            <img src={f.icon} alt="" class="size-[3em] rounded-lg shadow-md"/>
            <h4 set:html={ t(f.name) } class="m-0"/>
          </summary>
          <p class="ml-[4em] text-balance" set:html={ t(f.name, { context: "home", href: f.href })} />
        </details>
      ))}
    </section>
  </section>

  <section id="testimonials" class="px-[var(--bleed)] pt-8 pb-16  overflow-hidden bg-[#f6f8f4]">
    <h2>{ t("home.testimonials_heading") }</h2>
    <p class="max-w-[72ch] t:mr-[5em]" set:html={ t("home.testimonials_description") } />
    <div class="carousel" data-breakpoint="37.5rem">
      <div class="carousel-track">
        { testimonials.map(async (testimonial) => {
          const { Content } = await render(testimonial)
          return (
            <blockquote class="card">
              <div class="quote-wrapper">
                <Content />
              </div>
              <cite>
                {testimonial.data.name} <br />
                <span style="color: grey">{testimonial.data.from}</span>
              </cite>
            </blockquote>
          )
        })}
      </div>
      <div class="carousel-controls text-[larger] max-d:mt-[2em] w-max mx-auto tl:mb-[2em] tl:absolute bottom-full right-0 bg-white shadow-lg overflow-hidden rounded-lg">
        <button class="left">←</button>
        <button class="right">→</button>
      </div>
    </div>
  </section>

  <section id="cta">
    <p class="max-w-[40em] mx-auto">
      <strong>{ t("home.got_questions") }</strong>
      { t("home.here_to_help") }
    </p>
    <p class="max-w-[40em] mx-auto mt-8 text-[larger]">
      <a href="tel:+40754347347" class="btn btn-text rounded-full">
        <svg viewBox="0 0 48 48" class="icon">
          <use href="/icons.svg#phone" />
        </svg>
        { t("company.phone")}
      </a>
      <a href="mail:contact@ogor.ro" class="btn btn-text rounded-full">
        <svg viewBox="0 0 48 48" class="icon">
          <use href="/icons.svg#email" />
        </svg>
      </a>
    </p>
    <p class="max-w-[40em] mx-auto text-[larger]">
      <a href={ PUBLIC_OGOR_APP_LOGIN_URL } class="btn btn-black rounded-full">
        <svg class="icon">
          <use href="/logos/ogor.svg#logo" />
        </svg>
        <Fragment set:html={ t("home.cta") }/>
      </a>
    </p>
    <div class="assurances">
      <p>{ t("home.cta_assurance1") }</p>
      <span class="decoration">★</span>
      <p>{ t("home.cta_assurance2") }</p>
      <span class="decoration">★</span>
      <p>{ t("home.cta_assurance3") }</p>
    </div>
  </section>
  
  <section id="partners">
    <p>
      <strong>{ t("home.with_the_support_of") }:</strong>
      <br>
      <img src="/logos/esa.png" alt="Logo ESA" style="height: 3em; margin-right: 1em"/>
      <img src="/logos/rosa.png" alt="Logo ROSA" style="height: 5em"/>
    </p>
    <p>
      <strong>{ t('home.partners') }:</strong>
      <br>
      <img src="/logos/Alcedo.svg" alt="Logo Alcedo" style="height: 4em; margin-top: .5em">
    </p>
  </section>
</BaseLayout>


<script>
  const carousel = document.querySelector<HTMLDivElement>('.carousel')!
  const track = carousel.querySelector<HTMLDivElement>(".carousel-track")!
  const cards = carousel.querySelectorAll<HTMLQuoteElement>(".card")!
  const [prev, next] = carousel.querySelectorAll<HTMLButtonElement>(".carousel-controls button")
  const breakpoint = carousel.dataset["breakpoint"]

  if (typeof breakpoint !== "string") {
    console.warn("Missing breakpoint for testimonials carousel.")
  }

  const mql = window.matchMedia(`(min-width: ${breakpoint})`)

  let currentCardIndex = 0;
  let offset = cards[1].offsetLeft
  let maxCardOffset = mql.matches ? 2 : 1;

  mql.onchange = function(event) {
    if (event.matches) {
      maxCardOffset = 2
      if (currentCardIndex > cards.length - maxCardOffset) {
        currentCardIndex = cards.length - maxCardOffset
      }
    } else {
      maxCardOffset = 1
    }
    updateButtons();
  }
  const updateButtons = () => {
    prev.disabled = currentCardIndex <= 0;
    next.disabled = currentCardIndex >= cards.length - maxCardOffset;
  };
  const updateCarousel = (direction: number) => {
    currentCardIndex += direction
    track.style.transform = `translateX(${-offset * currentCardIndex}px)`
    updateButtons();
  };
  window.addEventListener('resize', function() {
    offset = cards[1].offsetLeft;
    track.style.transform = `translateX(${-offset * currentCardIndex}px)`;
  });

  prev.addEventListener('click', () => currentCardIndex > 0 && updateCarousel(-1));
  next.addEventListener('click', () => currentCardIndex < cards.length - maxCardOffset && updateCarousel(1));

  updateButtons();
</script>


<style is:inline>
  .plus a {
    color: initial;
  }
  .quote-wrapper p:first-child:before {
    content: open-quote;
    display: inline-block;
    margin-left: -1ch;
    width: 1ch;
    text-align: right;
  }
  mark {
    background-color: #ffe284;
    /* background: linear-gradient(to right, #FFD85D, #FFF0C6, #FFD85D); */
  }
  .quote-wrapper p:last-child::after { content: close-quote; }
</style>
<style>
  @reference "@/styles/global.css";

  #hero {
    background-color: var(--brand-yellow-6);

    img { width: 100%; }

    ._body {
      padding: var(--margins);
      line-height: 1.5;
      background: var(--brand-yellow-6);
      color: var(--action-color);
    }

    ._media1 {
      background-color: #F6F8F4;
      padding: var(--margins);

      img { 
        height: 240px;
        object-fit: contain;
      }
    }
    ._media2 {
      img { object-fit: cover; height: 100%; }
    }

    ._cta {
      background-color: #C58336;
      width: fit-content;
      padding: 1rem var(--margins);
      &:hover {
        background-color: #b57225;
      }
    }

    /* Layout */
    ._body   { grid-area: body; }
    ._media1 { grid-area: media1;}
    ._media2 { grid-area: media2;}
    ._cta    { grid-area: cta; }


    /* Different devices */
    @media (width >= theme(--breakpoint-t)) {
      & {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr auto auto;
        grid-template-areas: 
          "body   body"
          "media1 media2"
          "cta cta"
        ;
        background-color: var(--brand-yellow-5);
        
        ._cta {
          width: 100%;
          margin-left: 0;
          min-height: 8em;
          box-sizing: border-box;
        }
      }
    }
    @media (width >= theme(--breakpoint-d)) {
      & {
        grid-template-columns: var(--bleed) 1fr 1fr var(--bleed);
        grid-template-rows: 1fr auto auto;
        grid-template-areas: 
          ".      body   media2 media2"
          "media1 media1 media2 media2"
          "media1 media1 cta    ."
        ;
        min-height: 20em;
      }
    }
  }

  @keyframes shine {
    from {
      background-position-x: 0%;
    }
    to {
      background-position-x: 100%;
    }
  }
  #hero ._cta-link {
    position: relative;
    overflow: hidden;

    &::before {
      content: "";
      display: block;
      position: absolute;
      inset: 0 -25em;
      background-image: linear-gradient(-60deg, transparent 20%, transparent 40%, #ffffff88 42%, transparent 60%);
      background-position: 0% center;
      background-size: 25em 100%;
      background-repeat: no-repeat;
      animation: shine 2s cubic-bezier(0.645, 0.045, 0.355, 1);
      animation-fill-mode: backwards;
    }
  }

  #features {
    --li-color: hsla(32, 57%, 49%, 1);

    position: relative;
    padding-inline: var(--bleed);
    padding-block: 2em;
    background-color: #CCE6CA;

    & h3 {
      font-size: 150%;
    }

    @media (width >= theme(--breakpoint-t)) {
      &::after {
        content: "";
        position: absolute;
        right: 0;
        bottom: 0;
        width: calc((100% - var(--gutter)) / 2);
        height: 1rem;
        background: var(--color-rust);
      }
    }
  }

  .main-feature {
    text-align: center;
  }
  .feature {
    grid-template-columns: 1fr 1fr;
    grid-template-areas: "body media";
    gap: var(--gutter);
    padding-top: 2em;
    padding-bottom: 2em;

    &:where(.feature-left) {
      grid-template-areas: "media body";
    }

    @media (width >= theme(--breakpoint-t)) {
      display: grid;
      padding-bottom: initial;
    }
  }
  .main-feature,
  .feature,
  #context {
    position: relative;
    &::after {
      content: "";
      position: absolute;
      inset: auto var(--neg-bleed) 0;
      border-bottom: solid #c6d1b7;
    }
  }
  #context::after {
    inset-inline: 0;
  }

  .area-body {
    align-self: center;
  }
  .area-media {
    display: block;
    width: 100%;
    max-width: 32em;
    align-self: flex-end;

    & img {
      display: block;
      box-sizing: border-box;
    }
  }


  .plus details::after {
    content: "";
    border-top: thick dotted;
    display: block;
    margin-left: 4em;
    position: relative;
    top: .9em;
  }
  .plus details:last-child::after { content: none; }
  @media (width >= theme(--breakpoint-t)) {
    .plus details:nth-last-child(2):not([open])::after { content: none; }
  }

  .carousel { position: relative; }
  .carousel-track {
    display: flex;
    margin-top: 2em;
    gap: var(--gutter);
    transition: transform 0.3s ease-in-out;
    position: relative;
  }
  .card {
    display: flex;
    flex-direction: column;
    margin: 0;
    min-height: 10em;
    background-color: white;
    padding: 1.5em;
    border-radius: 8px;
    box-shadow: 0 .25rem 1rem 0 rgba(0, 0, 0, 0.25);
    box-sizing: border-box;
    min-width: 100%;

    @media (width >= theme(--breakpoint-t)) {
      min-width: calc((100% - var(--gutter)) / 2); 
    }

    & p {
      margin-top: 0;
      font-size: larger;
    }
    & cite {
      margin-top: auto;
      font-size: smaller;
    }
  }
  .carousel-controls {
    & button {
      border: none;
      margin: 0;
      padding: 0.25em 0.5em;
      background-color: transparent;
      transition: background-color 0.1s;

      &:hover { background-color: #F6F8F4; }
      &:disabled { background-color: initial; }
    }
  }

  #cta {
    --paper: #FFF0C6;
    padding: 2em;
    text-align: center;
    background: #FFF0C6;

    .btn-text {
      --bg: var(--action-bg);
    }

    .btn-black { padding-inline: 1em; }
    .btn-black .icon {
      width: 1.5em;
      height: 1.5em;
      margin: -.25em;
      margin-inline-end: -.125em;
    }

    .assurances {
      max-width: var(--container);
      margin-inline: auto;
      font-stretch: semi-condensed;
      
      @media (min-width: 40rem) {
        display: flex;
        gap: 1em;
        flex-direction: row;
      }
    }
    .decoration {
      align-self: center;
      color: hsla(197, 83%, 61%, 1);
    }
  }

  #partners {
    background-color: #000;
    color: white;
    text-align: center;
    padding: 2em;
    & p {
      display: inline-block;
      max-width: calc(var(--container) / 2);
      width: 45%;
      min-width: fit-content;
      vertical-align: top;
    }
    & img {
      vertical-align: middle;
    }
    & strong {
      display: inline-block;
      margin-bottom: 1em;
    }
  }
</style>
