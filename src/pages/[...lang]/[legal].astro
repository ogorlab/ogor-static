---
import { getLocalizedPaths, useI18n } from "@/i18n";
import type { GetStaticPaths } from "astro";
import BaseLayout from "@/layouts/BaseLayout.astro"

export const getStaticPaths = (() => getLocalizedPaths("legal")) satisfies GetStaticPaths;

const lang = Astro.currentLocale || "ro"

type LegalType = "generaltos_terms" | "tos_terms" | "privacy_terms" | "marketing_terms" | "cookie_terms"
type LegalDoc = {
  /** yyyy-mm-dd */
  start_date: string
  file_url: string
  summary: string
}
type LegalHistory = {
  [key: string]: Array<LegalDoc & {
    type: LegalType
    end_date: string
  }>
}

async function fetchLegal() {
  const endpoint = import.meta.env.PUBLIC_OGOR_BE_HOST + "/api/v1/legal"
  const requestInit: RequestInit = {
    headers: {
      "Accept-Language": lang
    }
  }
  const response = await fetch(endpoint, requestInit)
  const data = await response.json() as Partial<Record<LegalType, LegalDoc[]>>

  return data
}

const data = await fetchLegal()
const latest: Partial<Record<LegalType, LegalDoc>> = {}
const history: LegalHistory = {}

Object.entries(data).forEach(([type, docs]) => {
  latest[type as LegalType] = docs[0]

  for (let i = 1; i < docs.length; i++) {
    const doc = docs[i]
    const start_date = doc.start_date
    history[start_date] ??= []
    history[start_date].push({
      ...doc,
      type: type as LegalType,
      end_date: docs[i - 1]?.start_date,
    })
  }
})

const dates = Object.keys(history).sort((a, b) => b.localeCompare(a))

const { t } = useI18n(Astro.currentLocale)
---

<BaseLayout {...Astro.props}>

  <header>
    <h1>{t("legal.title")}</h1>
  </header>

  <section id="documents" class="mb-[3em]">

    { Object.entries(latest).map(([type, doc]) => (
        <article id={ t("urls:#" + type).substring(1) } 
          class="p-4 bg-[#eceeea] hover:bg-[var(--action-bg-alt)] target:outline-[.125em] target:outline-dashed target:outline-offset-[.25em] target:outline-[var(--action-muted)]"
          style="scroll-margin-top: 9em;"
        >
          <svg viewBox="0 0 48 48" class="size-[4em] float-right ml-4">
            <use href="/icons.svg#pdf" />
          </svg>
          <h4 class="m-0 font-semibold">{t("legal." + type)}</h4>
          <p class="mt-1 italic text-muted">
            {t("date", { date: new Date(doc.start_date) })}
          </p>
          <a href={doc.file_url} download class="mt-auto font-medium no-underline">{t("Download")}</a>
        </article>
      )
    )}
  </section>

  { dates.length > 0 && (
    <section>
      <h2>{t("legal.history")}</h2>
      <table>
        <thead>
          <tr>
            <th>{t("Date")}</th>
            <th>{t("document")}</th>
            <th>{t("availability")}</th>
            <th>{t("link")}</th>
          </tr>
        </thead>

        { dates.map((date) => (
          <tbody>
          { history[date].map((doc, index) => (
            <tr>
              { index === 0 && 
                <td rowspan={history[date].length}>
                  {t("dateMedium", { date: new Date(doc.start_date) })}
                </td>
              }
              <td>{t("legal." + doc.type)}</td>
              <td>
                {t("dateMedium", { date: new Date(doc.end_date) })}
              </td>
              <td>
                <a href={doc.file_url}>{t("download")}</a>
              </td>
            </tr>
          ))}
          </tbody>
        ))}
      </table>
    </section>
  )}
</BaseLayout>

<style is:inline>
  #content {
    margin-inline: var(--bleed);
    margin-bottom: 4em;
  }
</style>
<style>
  @reference "@/styles/global.css";

  #documents {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(16rem, 1fr));
    gap: 1em;

    & article {
      position: relative;
    }
    & a::before {
      content: "";
      position: absolute;
      inset: 0;
    }
  }


  @media (width < theme(--breakpoint-t)) {
    table, tbody, tr, th, td {
      display: block;
      text-align: left;
    }
    table thead { display: none; }

    table tr {
      position: relative;
      padding: .5em;
      border-top: solid lightgrey;

      &:active {
        background: var(--action-bg-alt);
      }
    }
    
    td:has(a) {
      position: absolute;
      inset: 0;
      opacity: 0;
      text-indent: -9999px;
    }

    td[rowspan] {
      display: none;
    }
  }
  @media (width <= theme(--breakpoint-t)) {
    table {
      width: 100%;
      border-collapse: collapse;
  
      & th,
      & td {
        padding: .5em;
        text-align: left;
  
        &:last-child {
          text-align: right;
        }
      }
  
      & thead th {
        border-bottom: medium solid lightgray;
      }
  
      & tbody :where(th, td) {
        border-top: solid lightgray;
      }
    }
  }
</style>