---
import { useI18n } from "@/i18n"
import type { CollectionEntry } from "astro:content"

interface Props {
  forecasts: CollectionEntry<"forecast">[]
}

const forecasts = Astro.props.forecasts.toReversed()
const { t } = useI18n(Astro.currentLocale)
const { getUrl } = Astro.locals

const id = t("urls:#history")
const dates: Array<Date> = []
const yields: Record<number, number[]> = {}

forecasts.forEach(({ data }, index) => {
  const date = new Date(data.forecast_date)
  dates.push(date)
  data.crops.forEach((crop) => {
    yields[crop.code] ||= []
    yields[crop.code][index] = crop.avg_yield
  })
})
---
<details style="scroll-padding-top: 6em;">
  <summary
    id={id.substring(1)} 
    style="scroll-margin-top: 6em"
    onclick="history.replaceState('', document.title, location.pathname + (this.parentNode.open ? '' : ('#' + this.id)) + location.search)"
  >
    {t("yield_forecast.history")}
  </summary>
  <script>
    (function() {
      const hash = window.location.hash
      if (!hash) return

      const target = document.querySelector(hash) as HTMLDivElement
      if (!target) return

      const details = target.closest("details")
      
      if (details && !details.open) {
        target.focus()
        details.open = true
      }
    })()
  </script>
  <div class="p-[1.5em] pt-0 overflow-x-auto">
    <table>
      {
        [
          { type: "spring_crops", crops: [108, 201] },
          { type: "autumn_crops", crops: [101, 105, 202] },
        ].map(({ type, crops }) => (<>
          <tr class="group">
            <th class="text-left" colspan="2">{t("spring_crops")}</th>
            { dates.map((date, index) => (
              <th class:list={[index === 0 && "latest_forecast", "min-w-24"]}>
                { date.toLocaleDateString(Astro.currentLocale, { day: "numeric", month: "short" }) }
              </th> 
            ))}
          </tr>
          { crops.map((crop_code, crop_index) => (
            <tr class={crop_index >= 1 ? "separator" : ""}>
              <th style="width: min-content!important;" class="pr-4">
                <div class="w-12">
                  <img src={`/images/crop_thumbnail_${crop_code}.png`} />
                </div>
              </th>
              <th class="text-left pr-4">
                {t(crop_code, { ns: "crops" })}
              </th>
              { dates.map((date, index) => {
                const avg_yield = yields[crop_code][index]?.toLocaleString(Astro.currentLocale, { minimumFractionDigits: 1, maximumFractionDigits: 1 })
                return (
                  <td class={ index === 0 ? "latest_forecast" : ""}>
                    {(avg_yield) && (
                    <a href={getUrl(`/yield/forecast/${ date.toISOString().split("T")[0] }`) + "#" + crop_code}>
                      { avg_yield }{ index === 0 && "Â t/ha"}
                    </a>
                    )}
                  </td>
                )
              })}
            </tr>
          ))}
          </>
        ))
      }
    </table>
  </div>
</details>

<style>
details {
  position: relative;
  border-radius: 0.5rem;
  box-sizing: border-box; 
  border: thin dotted hsla(32, 57%, 49%, 1);
  
  & summary {
    cursor: pointer;
    padding: 0.75em;
  }
}
details[open],
details:target {
  border: none;
  grid-column: 1/3;
  border-radius: 1rem;
  overflow-x: auto;
  background: white;

  summary {
    padding: 1.5rem;
    font-weight: 600; 
    font-size: 150%;
  }
  summary:focus-visible {
    outline-offset: -.125rem;
    outline: .125rem dashed;
    border-top-left-radius: 1rem;
    border-top-right-radius: 1rem;
  }
}
table {
  --cell-padding: .5em;
  --neg-cell-padding: -.5em;

  border-collapse: collapse;
  text-align: center;

  & .group th { 
    font-weight: 600;
    vertical-align: bottom;
  }

  & img {
    position: sticky;
    display: block;
    width: 150%;
    height: auto;
    margin: -25%;
  }
  & a {
    display: inline-block;
    margin: var(--neg-cell-padding);
    padding: var(--cell-padding);
  }
  & a:not(:hover) {
    text-decoration: none;
    color: inherit
  }

  & :where(th, td) {
    padding-block: var(--cell-padding, .5em);
  }
}

.separator :where(th, td):not(:first-child) {
  border-top: thin solid hsl(0 0% 0% / .25)
}

.latest_forecast { 
  background: hsla(90, 22%, 96%, 1);

  tr:first-child & { border-radius: 1em 1em 0 0; }
  tr:last-child  & { border-radius: 0 0 1em 1em; }
}
</style>
